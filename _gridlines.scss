$gl-vendor-prefix: 'webkit';

// Colors

$gl-color-light-pink: #FDD1D2;
$gl-color-pink: #F87A7D;
$gl-color-red: #BB0000;

@mixin gridlines($width-column, $width-gutter: 0px, $width-padding: 0px, $line-height: 0px) {
  @each $measure in ($width-column, $width-gutter, $width-padding, $line-height) {
    @if unit($measure) != 'px' {
      @error 'All arguments need to be pixel values.';
    }
  }

  // Warnings

  @if $width-padding >= ($width-column / 2) {
    @warn "The column padding shouldn't be greater than half the width of the column.";
  }

  @if $line-height > 0px and $line-height < 4px {
    @warn "The baseline grid won't be visible unless the line-height is greater than 3px.";
  }

  // Widths

  $width-total: $width-column + $width-gutter;

  // Percentages

  $percentage-column: percentage($width-column / $width-total);
  $percentage-inner-column: percentage(($width-column - $width-padding) / $width-total);
  $percentage-padding: percentage($width-padding / $width-total);

  &:before,
  &:after {
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: -1;
  }

  &:before {
    @if $width-gutter == 0px {
      background-image: -#{$gl-vendor-prefix}-linear-gradient(left, $gl-color-pink 50%, $gl-color-light-pink 50%);
      background-size: ($width-total * 2);
    } @else {
      background-image: -#{$gl-vendor-prefix}-linear-gradient(left, $gl-color-pink $percentage-padding, $gl-color-light-pink $percentage-padding, $gl-color-light-pink $percentage-inner-column, $gl-color-pink $percentage-inner-column, $gl-color-pink $percentage-column, transparent $percentage-column);
      background-size: $width-total;
    }
  }

  @if $line-height > 2px {
    &:after {
      background-image: -#{$gl-vendor-prefix}-linear-gradient(bottom, $gl-color-red percentage(1px / $line-height), transparent percentage(1px / $line-height));
      background-size: $line-height $line-height;
    }
  }
}
